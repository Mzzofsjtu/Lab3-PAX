#include "common/date.h"
#include "common/log/log.h"
#include <charconv>
#include <ranges>
#include <string_view>
#include <sstream>
#include <iomanip>

using namespace std::ranges;

constexpr int32_t DATE_MIN_YEAR                = 1970;
constexpr int32_t DATE_MAX_YEAR                = 2038;
constexpr int32_t DATE_MAX_MONTH               = 1;
constexpr int32_t DATE_MAX_DAY                 = 19;
constexpr int32_t NORMAL_DAYS[]                = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
constexpr int32_t LEAP_DAYS[]                  = {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
constexpr int32_t CUMULATIVE_DAYS[]            = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365};
constexpr int32_t CUMULATIVE_LEAP_DAYS[]       = {0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366};
constexpr int32_t CUMULATIVE_YEAR_DAYS[]       = {0,
          365,
          730,
          1096,
          1461,
          1826,
          2191,
          2557,
          2922,
          3287,
          3652,
          4018,
          4383,
          4748,
          5113,
          5479,
          5844,
          6209,
          6574,
          6940,
          7305,
          7670,
          8035,
          8401,
          8766,
          9131,
          9496,
          9862,
          10227,
          10592,
          10957,
          11323,
          11688,
          12053,
          12418,
          12784,
          13149,
          13514,
          13879,
          14245,
          14610,
          14975,
          15340,
          15706,
          16071,
          16436,
          16801,
          17167,
          17532,
          17897,
          18262,
          18628,
          18993,
          19358,
          19723,
          20089,
          20454,
          20819,
          21184,
          21550,
          21915,
          22280,
          22645,
          23011,
          23376,
          23741,
          24106,
          24472,
          24837,
          25202};
constexpr int8_t  MONTH_PER_DAY_OF_YEAR[]      = {1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          10,
          11,
          11,
          11,
          11,
          11,
          11,
          11,
          11,
          11,
          11,
          11,
          11,
          11,
          11,
          11,
          11,
          11,
          11,
          11,
          11,
          11,
          11,
          11,
          11,
          11,
          11,
          11,
          11,
          11,
          11,
          12,
          12,
          12,
          12,
          12,
          12,
          12,
          12,
          12,
          12,
          12,
          12,
          12,
          12,
          12,
          12,
          12,
          12,
          12,
          12,
          12,
          12,
          12,
          12,
          12,
          12,
          12,
          12,
          12,
          12,
          12};
constexpr int8_t  LEAP_MONTH_PER_DAY_OF_YEAR[] = {1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     4,
     4,
     4,
     4,
     4,
     4,
     4,
     4,
     4,
     4,
     4,
     4,
     4,
     4,
     4,
     4,
     4,
     4,
     4,
     4,
     4,
     4,
     4,
     4,
     4,
     4,
     4,
     4,
     4,
     4,
     5,
     5,
     5,
     5,
     5,
     5,
     5,
     5,
     5,
     5,
     5,
     5,
     5,
     5,
     5,
     5,
     5,
     5,
     5,
     5,
     5,
     5,
     5,
     5,
     5,
     5,
     5,
     5,
     5,
     5,
     5,
     6,
     6,
     6,
     6,
     6,
     6,
     6,
     6,
     6,
     6,
     6,
     6,
     6,
     6,
     6,
     6,
     6,
     6,
     6,
     6,
     6,
     6,
     6,
     6,
     6,
     6,
     6,
     6,
     6,
     6,
     7,
     7,
     7,
     7,
     7,
     7,
     7,
     7,
     7,
     7,
     7,
     7,
     7,
     7,
     7,
     7,
     7,
     7,
     7,
     7,
     7,
     7,
     7,
     7,
     7,
     7,
     7,
     7,
     7,
     7,
     7,
     8,
     8,
     8,
     8,
     8,
     8,
     8,
     8,
     8,
     8,
     8,
     8,
     8,
     8,
     8,
     8,
     8,
     8,
     8,
     8,
     8,
     8,
     8,
     8,
     8,
     8,
     8,
     8,
     8,
     8,
     8,
     9,
     9,
     9,
     9,
     9,
     9,
     9,
     9,
     9,
     9,
     9,
     9,
     9,
     9,
     9,
     9,
     9,
     9,
     9,
     9,
     9,
     9,
     9,
     9,
     9,
     9,
     9,
     9,
     9,
     9,
     10,
     10,
     10,
     10,
     10,
     10,
     10,
     10,
     10,
     10,
     10,
     10,
     10,
     10,
     10,
     10,
     10,
     10,
     10,
     10,
     10,
     10,
     10,
     10,
     10,
     10,
     10,
     10,
     10,
     10,
     10,
     11,
     11,
     11,
     11,
     11,
     11,
     11,
     11,
     11,
     11,
     11,
     11,
     11,
     11,
     11,
     11,
     11,
     11,
     11,
     11,
     11,
     11,
     11,
     11,
     11,
     11,
     11,
     11,
     11,
     11,
     12,
     12,
     12,
     12,
     12,
     12,
     12,
     12,
     12,
     12,
     12,
     12,
     12,
     12,
     12,
     12,
     12,
     12,
     12,
     12,
     12,
     12,
     12,
     12,
     12,
     12,
     12,
     12,
     12,
     12,
     12};

std::pair<int32_t, int32_t> extract_year_offset_from_days(int32_t days_since_epoch)
{
  int32_t year        = DATE_MIN_YEAR;
  int32_t year_offset = days_since_epoch / 365;
  while (days_since_epoch < CUMULATIVE_YEAR_DAYS[year_offset]) {
    --year_offset;
    ASSERT(year_offset >= 0, "year_offset should be valid");
  }
  year += year_offset;
  ASSERT(days_since_epoch >= CUMULATIVE_YEAR_DAYS[year_offset], "");
  return {year, year_offset};
}

std::string Date::to_string() const
{
  auto [year, year_offset] = extract_year_offset_from_days(days_since_epoch_);
  int32_t day              = days_since_epoch_ - CUMULATIVE_YEAR_DAYS[year_offset];
  ASSERT(day >= 0 && day <= 365, "day shoule be valid");
  bool    is_leap_year = (CUMULATIVE_YEAR_DAYS[year_offset + 1] - CUMULATIVE_YEAR_DAYS[year_offset]) == 366;
  int32_t month;
  if (is_leap_year) {
    month = LEAP_MONTH_PER_DAY_OF_YEAR[day];
    day -= CUMULATIVE_LEAP_DAYS[month - 1];
  } else {
    month = MONTH_PER_DAY_OF_YEAR[day];
    day -= CUMULATIVE_DAYS[month - 1];
  }
  day++;
  ASSERT(day > 0 && day <= (is_leap_year ? LEAP_DAYS[month] : NORMAL_DAYS[month]), "day should be valid");
  ASSERT(month > 0 && month <= 12, "month should be valid");
  std::stringstream ss;
  ss << year << '-' << std::setw(2) << std::setfill('0') << month << '-' << std::setw(2) << std::setfill('0') << day;
  return ss.str();
}

bool is_leap_year(int32_t year) { return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0); }

bool is_year_month_day_valid(int32_t year, int32_t month, int32_t day)
{
  if (month < 1 || month > 12) {
    return false;
  }
  if (day < 1) {
    return false;
  }
  if (year < DATE_MIN_YEAR || year > DATE_MAX_YEAR) {
    return false;
  }
  if (year == DATE_MAX_YEAR) {
    if (month > DATE_MAX_MONTH || (month == DATE_MAX_MONTH && day > DATE_MAX_DAY)) {
      return false;
    }
  }
  return is_leap_year(year) ? day <= LEAP_DAYS[month] : day <= NORMAL_DAYS[month];
}

bool date_from_year_month_day(int32_t year, int32_t month, int32_t day, Date &other)
{
  if (!is_year_month_day_valid(year, month, day)) {
    return false;
  }
  int32_t days_since_epoch = 0;
  days_since_epoch += is_leap_year(year) ? CUMULATIVE_LEAP_DAYS[month - 1] : CUMULATIVE_DAYS[month - 1];
  days_since_epoch += day - 1;
  days_since_epoch += CUMULATIVE_YEAR_DAYS[year - DATE_MIN_YEAR];
  other = Date(days_since_epoch);
  return true;
}

bool Date::from_string(const char *str, Date &date)
{
  std::string_view sv             = str;
  size_t           num_components = 0;
  int32_t          date_units[3];
  for (auto unit : sv | views::split('-')) {
    if (num_components == 3) {
      return false;
    }
    auto [_, ec] = std::from_chars(unit.begin(), unit.end(), date_units[num_components]);
    if (ec != std::errc()) {
      return false;
    }
    ++num_components;
  }
  if (num_components != 3) {
    return false;
  }
  auto [year, month, day] = date_units;
  return date_from_year_month_day(year, month, day, date);
}